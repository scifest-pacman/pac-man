package com.btyoungscientist.pacman;

import java.awt.BorderLayout;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.awt.image.WritableRaster;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import ie.scifest.pacman.object.GameObject;
import ie.scifest.pacman.render.PacFrame;
import ie.scifest.pacman.render.PacPanel;
import ie.scifest.pacman.render.Sprite;
import ie.scifest.pacman.util.Mth;

public class PacMan {
	
	public static PacMan instance;
	public JFrame mainWindow;
	public static final int xRes = 224+16;
	public static final int yRes = 288+48;
	public static final int windowScale = 2;
	private long prevTime;
	public double deltaTime;
	public double deltaTimeMillis;
	public double FPS;
	public WritableRaster mainRaster;
	public BufferedImage mainImage;
	public JLabel mainJLabel;
	public JPanel jPanel;
	public static boolean currentGameIs2P;
	public static boolean playerIs2P;
	public static int score1p = 0; //multiplied by 10
	public static int scoreHigh = 0; //multiplied by 10
	public static int score2p = 0; //multiplied by 10
	public static int eatenDotCount = 0;
	private static final int flashCycle = 16; 
	private static double flashTimer = 0;
	private static double tmp_closeTimer = 0;
	BufferedImage mainTiles;
	public Graphics2D gMain;
	private static Controls controlsListener = new Controls();
	public static int livesLeft = 2;

	public static final int MAX_OBJECTS = 32;
	public static GameObject[] objectList = new GameObject[MAX_OBJECTS];
	public static int objectCount = 0;

	// deleted object management
	public static int[] freedIDs = new int[MAX_OBJECTS];
	public static int freedIDCount = 0;
	
	public static void spawnObject(GameObject object) {
		object.pacMan = instance;
		int idToPopulate = objectCount;
		if (freedIDCount != 0) {
			freedIDCount--; // pop it off
			idToPopulate = freedIDs[freedIDCount];
		} else {
			objectCount++;
		}
		objectList[idToPopulate] = object;
	}
	
	// make sure object is otherwise fully dereferenced first before using
	public static void deleteObject(GameObject object) {
		freedIDs[freedIDCount] = object.id;
		freedIDCount++; // push it on
		objectList[object.id] = null; // remove it from the list
	}
	
	private static void updateObjects() {
		for (int i=0; i<objectCount; i++) {
			if (objectList[i] == null)
				continue;
			objectList[i].update();
		}
	}
	
	private static void drawObjectsPaused() {
		for (int i=0; i<objectCount; i++) {
			if (objectList[i] == null)
				continue;
			objectList[i].draw(true);
		}
	}
	
	public static void addScore(int score) {
		if (playerIs2P) {
			score2p += score;
			return;
		}
		score1p += score;
	}
	
	private void gameLoop() {
		while (mainWindow != null && mainWindow.isVisible()) { // gameloop!
			
			while (System.nanoTime()-prevTime < 1000.0d/60.0d/0.000001d) {
				// ghetto vsync
			}
			
			if (tmp_closeTimer > 120)
				break;
			
			//score1p++;
			//Date date = new Date();
			deltaTime = (System.nanoTime()-prevTime)*0.06d*0.000001d; // 60fps mapping I hope
			deltaTimeMillis = (System.nanoTime()-prevTime)*0.000001d;
			FPS = ((1000/0.000001d/(System.nanoTime()+1-prevTime)));
			//System.out.println("Loop! Previous frame took "+String.format("%.2f",deltaTimeMillis)+"ms, which is approx. "+String.format("%.2f",FPS)+"fps");
			mainWindow.setTitle(String.format("Pac-Man (%.2f FPS)", FPS));
			int clear[] = new int[xRes*yRes];
			
			flashTimer = Mth.mod(flashTimer + deltaTime, flashCycle);
			
			// clear
			for (int i=0; i < xRes*yRes; i++) {
				clear[i] = 0;
			}
			
			final int[] a = ( (DataBufferInt) mainImage.getRaster().getDataBuffer() ).getData();
			System.arraycopy(clear, 0, a, 0, clear.length);
			
			Tilemaps.drawToMain(Tilemaps.highScorePrint, 0);
			
			// draw 1up
		    int[] player1ScoreTilemap = Tilemaps.intToTilemap(score1p);
		    for (int i = 0; i < player1ScoreTilemap.length; i++) {
		    	background[i+(35-player1ScoreTilemap.length)] = player1ScoreTilemap[i];
		    }
		    
		    background[35] = Tilemaps.chr.zero;
		    scoreHigh = Math.max(scoreHigh, Math.max(score2p, score1p));
		    
			// draw high score
			if (scoreHigh != 0) {
				int[] highScoreTilemap = Tilemaps.intToTilemap(scoreHigh);
				for (int i = 0; i < highScoreTilemap.length; i++) {
					background[i+(44-highScoreTilemap.length)] = highScoreTilemap[i];
				}
				background[44] = Tilemaps.chr.zero;
			}
			
			// draw 2up
			if (currentGameIs2P) {
				int[] player2ScoreTilemap = Tilemaps.intToTilemap(score2p);
				for (int i = 0; i < player2ScoreTilemap.length; i++) {
					background[i+(44-player2ScoreTilemap.length)] = player2ScoreTilemap[i];
				}
				background[44] = Tilemaps.chr.zero;
			}
			
			// draw background tiles
			for (int i = 0; i < background.length; i++) {
				int xcoord = (i % 28)*8;
				int ycoord = (i / 28)*8;
				if (!((background[i] == 0x2E) && (Math.floor(flashTimer/(flashCycle/2)) != 0)))
					gMain.drawImage(mainTiles, xcoord, ycoord, xcoord+8, ycoord+8 , 0, background[i]*8, 8, (background[i]*8)+8, null);
			}
			
			if (eatenDotCount >= 248) {
				tmp_closeTimer+=deltaTime;
				drawObjectsPaused();
				Sprite.RenderSprites();
				FinishUpFrame();
				continue;
			}
			
			updateObjects();
			
			int[] eatenDotCountTilemap = Tilemaps.intToTilemap(eatenDotCount);
			for (int i = 0; i < eatenDotCountTilemap.length; i++) {
				background[i+(1000-eatenDotCountTilemap.length)] = eatenDotCountTilemap[i];
			}
			
			Sprite.RenderSprites();
			
			FinishUpFrame();
		}
	}
	
	private void FinishUpFrame() {
		// frame end stuff 
		mainWindow.repaint();
		prevTime = System.nanoTime();
		controlsListener.updateOld();
	}
	
	private void createWindow() {
		try {
			mainTiles = ImageIO.read(getClass().getResourceAsStream("/sprite/tiles.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.exit(0);
		}
		
		mainImage   = new BufferedImage(xRes, yRes, BufferedImage.TYPE_INT_RGB);
		gMain = (Graphics2D) mainImage.getGraphics();
		mainRaster = mainImage.getRaster();
		mainWindow = new PacFrame();
		mainWindow.setLayout(new BorderLayout());
		mainWindow.addKeyListener(controlsListener);
		jPanel = new PacPanel();
		mainWindow.add(jPanel, BorderLayout.CENTER);
		mainWindow.pack();
		mainWindow.setVisible(true);
		spawnObject(new ie.scifest.pacman.object.PacMan());
	}
	
	// entry point
	public static void main(String[] args) {
		System.out.println("Starting Pac-Man!");
		instance = new PacMan();
		
		for (int i=0; i<args.length; i++) {
		try {
			if (args[i].toLowerCase().contains("highscore")) {
				scoreHigh = Integer.parseInt(args[i+1]) / 10;
			}
		} catch (Exception e) {
			System.out.println("Failed to parse high score argument.");
		}
		}
		
		instance.createWindow();
		instance.gameLoop();
		System.out.println("Exiting!");
		System.exit(0);
	}
	
	public static int[] background = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
			0x06, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x06, 0x06, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x06,
			0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06,
			0x06, 0x2E, 0x06, 0x00, 0x00, 0x06, 0x2D, 0x06, 0x00, 0x00, 0x00, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x00, 0x00, 0x00, 0x06, 0x2D, 0x06, 0x00, 0x00, 0x06, 0x2E, 0x06,
			0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06,
			0x06, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x06,
			0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06,
			0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06,
			0x06, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x06, 0x06, 0x2D, 0x2D, 0x2D, 0x2D, 0x06, 0x06, 0x2D, 0x2D, 0x2D, 0x2D, 0x06, 0x06, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x06,
			0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x2D, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x2D, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x2D, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x2D, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x2D, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x2D, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x2D, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x2D, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x2D, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x2D, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x00, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
			0x06, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x06, 0x06, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x06,
			0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06,
			0x06, 0x2E, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x2E, 0x06,
			0x06, 0x2D, 0x2D, 0x2D, 0x06, 0x06, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x00, 0x00, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x06, 0x06, 0x2D, 0x2D, 0x2D, 0x06,
			0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06,
			0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06,
			0x06, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x06, 0x06, 0x2D, 0x2D, 0x2D, 0x2D, 0x06, 0x06, 0x2D, 0x2D, 0x2D, 0x2D, 0x06, 0x06, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x06,
			0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06,
			0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x2D, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x2D, 0x06,
			0x06, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x06,
			0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			
		};
}
